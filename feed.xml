<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://lei900.github.io/</id><title>Lei's Notebook</title><subtitle>エンジニア2年目。仕事で主にTypescript, Node.js, MongoDBを使っている。</subtitle> <updated>2024-09-03T20:30:26+09:00</updated> <author> <name>Lei's Notebook</name> <uri>https://lei900.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://lei900.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://lei900.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 Lei's Notebook </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>『世界一流エンジニアの思考法』読書メモ: 仕事は楽しむもの</title><link href="https://lei900.github.io/24/08/world-class-engieer/" rel="alternate" type="text/html" title="『世界一流エンジニアの思考法』読書メモ: 仕事は楽しむもの" /><published>2024-08-29T00:00:00+09:00</published> <updated>2024-08-29T00:00:00+09:00</updated> <id>https://lei900.github.io/24/08/world-class-engieer/</id> <content src="https://lei900.github.io/24/08/world-class-engieer/" /> <author> <name>Lei's Notebook</name> </author> <category term="Career" /> <summary> 最近、世界一流エンジニアの思考法という本とても人気があるようで、読んでみた。 「Team Geek」や「Clean Agile」、「NO HARD WORK!」などの本と似たような観点が多いと感じるが、あらためて考えさせられる部分も多かった。 以下、個人的に印象に残った部分をメモ。 理解に時間をかける プログラミングの仕事で、わからないバグやエラーが日常的に発生している。その時、エンジニア、特に初心者がやりがちなのは、とりあえず色々試行錯誤を始める。 AIのおかげで、今はエラーログを投げるとすぐたくさんの可能性と解決策が出てくる。そのままコピペでは、たまにうまくいくこともあるが、よくあるのは、たくさん試しても解決できてない。ただ時間を無駄にしてしまうだけ。 それは、そのバグの挙動を理解していないからだ。 すぐに手を動かすより、まずそのエラーが何を意味しているのか、どうい... </summary> </entry> <entry><title>"drain" event を使ってメモリリークを防ぐ</title><link href="https://lei900.github.io/24/08/js-dl-memory-leak/" rel="alternate" type="text/html" title="&amp;quot;drain&amp;quot; event を使ってメモリリークを防ぐ" /><published>2024-08-09T00:00:00+09:00</published> <updated>2024-09-03T20:30:00+09:00</updated> <id>https://lei900.github.io/24/08/js-dl-memory-leak/</id> <content src="https://lei900.github.io/24/08/js-dl-memory-leak/" /> <author> <name>Lei's Notebook</name> </author> <category term="Coding" /> <summary> 背景 あるcsvファイルのダウンロード処理で、下記のようなデータ加工して、csv streamに書き込む処理がある。 // csv（配列データ）の作成 function　writeStream(data, writer) { data.forEach((dataRow) =&amp;gt; { const result = processData(dataRow); writer.write(result); }); writer.end(); } function processData(dataRow) { // データの加工処理 return processedData; } csvローデータが数万行以上の場合、データをDLする際にJavaScript heap out of memory　エラーが発生する。 2023-07-11... </summary> </entry> <entry><title>ドメイン駆動設計についての理解</title><link href="https://lei900.github.io/24/05/domain-driven-design-fundamental/" rel="alternate" type="text/html" title="ドメイン駆動設計についての理解" /><published>2024-05-26T00:00:00+09:00</published> <updated>2024-05-27T11:14:14+09:00</updated> <id>https://lei900.github.io/24/05/domain-driven-design-fundamental/</id> <content src="https://lei900.github.io/24/05/domain-driven-design-fundamental/" /> <author> <name>Lei's Notebook</name> </author> <category term="Coding" /> <summary> 最近、ドメイン駆動設計入門という本を読んだ。この本では、値オブジェクトやドメインサービスなど、多くの概念が紹介されているが、それらの概念を全力で理解しようとした結果、ドメイン駆動設計の基本的な考え方がかえって理解しにくくなってしまった。 そこで英語で情報を検索し、いくつかの資料を読んだ後、特にエリック・エバンス本人の講演動画（What is DDD - Eric Evans - DDD Europe 2019）を視聴した。これにより、DDDの基本的な考え方についてなんとなくイメージが付いたと思うので、メモとして残しておく。 ドメイン駆動設計とは ドメイン駆動設計（DDD）は、ソフトウェアを設計するためのアプローチであり、ビジネスドメインの知識に焦点を当て、その知識をソフトウェアモデルに抽象化する。 「ドメイン」とは、ビジネス領域の特定の知識のこと。 例えば、銀行業界のドメイン... </summary> </entry> <entry><title>『Team Geek』読書メモ: ソフトウエア開発はチームスポーツである</title><link href="https://lei900.github.io/24/05/team-geek/" rel="alternate" type="text/html" title="『Team Geek』読書メモ: ソフトウエア開発はチームスポーツである" /><published>2024-05-04T00:00:00+09:00</published> <updated>2024-05-05T11:22:39+09:00</updated> <id>https://lei900.github.io/24/05/team-geek/</id> <content src="https://lei900.github.io/24/05/team-geek/" /> <author> <name>Lei's Notebook</name> </author> <category term="Career" /> <summary> Team Geek――Googleのギークたちはいかにしてチームを作るのかという本は、「自分のプログラマーキャリアに最も影響を与えているいくつかの本の一つ」として、複数のブログで推薦されていることを見かけたので、GW期間中に読み終えた。 以下、読書メモ。 ソフトウエア開発はチームスポーツである エンジニアリングは簡単だ。人間が難しい。 プログラムとして成功するには、最新の言語を覚えたり高速なコードを書いたりするだけではいけない。プログラマは、常にチームで仕事をする。君が思っている以上に、チームは個人の生産性や幸福に直接影響する。 本書の基本的な考え： ソフトウエア開発はチームスポーツであるり、技術的要因と同じだけ人の要因が影響するというものだ。 このチームスポーツの考え方が本書で何度も強調されている。 天才プログラマーの神話を破る プログラマーのコミュニティには、天... </summary> </entry> <entry><title>MongoDBのreplica setに新しいsecondary nodeを追加する手順</title><link href="https://lei900.github.io/24/04/secondary-mongodb-setup/" rel="alternate" type="text/html" title="MongoDBのreplica setに新しいsecondary nodeを追加する手順" /><published>2024-04-21T00:00:00+09:00</published> <updated>2024-08-19T14:33:59+09:00</updated> <id>https://lei900.github.io/24/04/secondary-mongodb-setup/</id> <content src="https://lei900.github.io/24/04/secondary-mongodb-setup/" /> <author> <name>Lei's Notebook</name> </author> <category term="Coding" /> <summary> 背景 分散DBとして、もう一台のDBサーバーを構築し、新しいsecondary nodeとして既存のMongoDBのreplica setに追加する作業を行った。 作業前は、既存のMongoDB replica setは以下のような構成であった。 primary node secondary node arbiter node 作業後は、二つのsecondary nodeが存在する構成となる。 作業環境 OS: AlmaLinux 8.5 MongoDB: 4.4.13 作業手順 分散サーバー上で新しいmongodb instance追加 新しいDBサーバーを構築し、MongoDBをインストールする。 新しいDBサーバーのMongoDBの設定ファイルを編集する。 $ sudo vi /etc/mongod.conf 以下の設定... </summary> </entry> </feed>
